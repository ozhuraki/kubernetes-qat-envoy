
ARG BASE_IMAGE=clearlinux:base

FROM ${BASE_IMAGE} as build-deps

# Retrieve $BASE_IMAGE again as FROM clears preceeding ARGs

ARG BASE_IMAGE

ARG LLVM_RELEASE=11.0.0

SHELL [ "/bin/bash", "-c" ]

RUN if [[ "${BASE_IMAGE}" =~ clearlinux ]]; then \
        swupd update && \
        swupd bundle-add --skip-diskspace-check --no-boot-update \
            os-core-dev \
            c-basic \
            python3-basic \
            git \
            curl \
            llvm10 \
            devpkg-systemd \
            devpkg-openssl \
        ; \
    elif [[ "${BASE_IMAGE}" =~ (ubuntu:(bionic|focal)|debian:stable) ]]; then \
        apt-get update && \
        DEBIAN_FRONTEND=noninteractive apt-get install \
                                           -y --no-install-recommends \
            libtinfo5 \
            autoconf \
            automake \
            libtool \
            pkg-config \
            make \
            cmake \
            ninja-build \
            python3-pip \
            virtualenv \
            git \
            gperf \
            libudev-dev \
            libssl-dev \
            curl \
            ca-certificates \
            xz-utils && \
        # without '--no-install-recommends' default g++ pulls libstdc++-*-dev
        apt-get install -y g++ && \
        update-alternatives --install /usr/bin/python python /usr/bin/python3 0 && \
        curl -fsSL https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_RELEASE}/clang+llvm-${LLVM_RELEASE}-x86_64-linux-gnu-ubuntu-16.04.tar.xz | tar x --xz && \
        mv ./clang+llvm-${LLVM_RELEASE}* /opt/llvm \
        ; \
    else \
        exit 1; \
    fi

ENV PATH=/opt/llvm/bin:$PATH

RUN curl -fsSL --output /usr/bin/bazel https://github.com/bazelbuild/bazelisk/releases/download/v1.6.1/bazelisk-linux-amd64 && \
    chmod +x /usr/bin/bazel

FROM build-deps as builder

ARG QAT_DRIVER_RELEASE="qat1.7.l.4.10.0-00014"

RUN mkdir QAT_Lib && \
    cd QAT_Lib && \
    curl -L https://01.org/sites/default/files/downloads/$QAT_DRIVER_RELEASE.tar.gz | tar xz && \
    sed -i -e 's/cmn_ko$//' -e 's/lac_kernel$//' quickassist/Makefile && \
    KERNEL_SOURCE_ROOT=/tmp ./configure && \
    make quickassist-all adf-ctl-all && \
    install -m 755 build/libqat_s.so /usr/lib/ && \
    install -m 755 build/libusdm_drv_s.so /usr/lib/ && \
    install -m 755 build/adf_ctl /usr/bin/

RUN git clone -b $IPP_CRYPTO_VERSION https://github.com/intel/ipp-crypto && \
    cd /ipp-crypto/sources/ippcp/crypto_mb && \
    cmake -B ../build \
        -DOPENSSL_ROOT_DIR=/usr/bin/openssl \
        -DOPENSSL_INCLUDE_DIR=/usr/include/openssl \
        -DOPENSSL_LIBRARIES=/usr/lib64 && \
    cd ../build && \
    make crypto_mb && \
    make install && \
    install -m 755 bin/vfy_ifma_cp_rsa_mb /usr/bin/ && \
    install -m 755 bin/vfy_ifma_rsa_mb /usr/bin/

RUN git clone -b $IPSEC_MB_VERSION https://github.com/intel/intel-ipsec-mb && \
    cd /intel-ipsec-mb && \
    make && \
    make install LIB_INSTALL_DIR=/usr/lib64

RUN git clone -b $QAT_ENGINE_VERSION https://github.com/intel/QAT_Engine && \
    cd /QAT_Engine && \
    ./autogen.sh && \
    ./configure \
        --enable-ipsec_offload \
        --enable-multibuff_offload \
        --with-openssl_install_dir=/usr/lib64 \
        --with-multibuff_install_dir=/usr/local \
        --enable-openssl_install_build_arch_path && \
    sed -i -e 's:^\(const char \*engine_qat_id = \).*:\1"avx512";:' e_qat.c && \
    make && \
    make install && \
    mv /usr/lib64/engines-1.1/qat.so /usr/lib64/engines-1.1/avx512.so && \
    make clean && \
    git restore e_qat.c && \
    ./configure \
        --with-qat_dir=/QAT_Lib \
        --disable-ipsec_offload \
        --disable-multibuff_offload \
        --with-openssl_install_dir=/usr/lib64 \
        --with-qat_install_dir=/usr/lib \
        --enable-openssl_install_build_arch_path && \
    make && \
    make install

FROM builder AS envoy-builder

ARG BAZEL_EXTRA_BUILD_ARGS="-c opt"

COPY . /envoy

RUN cd /envoy && \
    mkdir -p /build && \
    CC=clang CXX=clang++ bazel --output_user_root=/build/ build $BAZEL_EXTRA_BUILD_ARGS //:envoy

FROM clearlinux:base

COPY --from=builder /usr/lib64/libstdc++.so.6 /usr/lib64
COPY --from=builder /usr/lib/libqat_s.so /usr/lib64
COPY --from=builder /usr/lib/libusdm_drv_s.so /usr/lib64
COPY --from=builder /usr/lib64/libIPSec_MB.so.0 /usr/lib64/
COPY --from=builder /usr/lib64/lib/libqat.so /usr/lib64
COPY --from=builder /usr/bin/adf_ctl /usr/bin
COPY --from=builder /usr/bin/vfy_ifma_cp_rsa_mb /usr/bin
COPY --from=builder /usr/bin/vfy_ifma_rsa_mb /usr/bin
COPY --from=builder /usr/lib64/engines-1.1/avx512.so /usr/lib64/engines-1.1/avx512.so
COPY --from=builder /usr/lib64/engines-1.1/qat.so /usr/lib64/engines-1.1
COPY --from=envoy-builder /envoy/bazel-bin/envoy /envoy-static
COPY --from=builder /QAT_Lib/LICENSE.GPL /usr/share/package-licenses/libqat/LICENSE.GPL
COPY --from=builder /QAT_Engine/LICENSE /usr/share/package-licenses/QAT_Engine/LICENSE
COPY --from=builder /ipp-crypto/LICENSE /usr/share/package-licenses/ipp-crypto/LICENSE
COPY --from=builder /intel-ipsec-mb/LICENSE /usr/share/package-licenses/intel-ipsec-mb/LICENSE

STOPSIGNAL SIGTERM

ENTRYPOINT ["/envoy-static", "-c", "/etc/envoy/config/envoy-conf.yaml", "--cpuset-threads"]
